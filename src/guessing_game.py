import random


class Game():
    '''
        An instance of the guessing game with k levels with n possible answers
        (including the correct one) at each level. The correct answers are
        generated by the function f(level_number).

        At each timestep, the agent must find the correct answer from a list of
        possible answers. Solving this is known as a 'level'.

        Ex: 
        ```
        # 4 possible answers per level, 5 levels, [0,10] range for possible 
        # answers, correct answer is 0-indexed level number.
        Game(4, 5, 0, 10, lambda x: x)
        ```
    '''
    def __init__(self, actions, levels, min_possible_answer, max_possible_answer, correct_answer):
        self.instance = Game.instance(actions, levels, min_possible_answer, max_possible_answer, correct_answer)
        self.correct_answer = correct_answer
        self.current_level = 0
        self.max_level = levels
    
    def add_answer(l, a):
        l.append(a)
        random.shuffle(l)
        return l

    def instance(n, k, min_possible_answer, max_possible_answer, f):
        l = []
        l.extend(Game.add_answer([random.randint(min_possible_answer, max_possible_answer) for _ in range(1,n-1)], f(j)) for j in range(1,k+1))
        return l

    def guess(self, guess):
        if guess == self.correct_answer(self.current_level):
            if self.current_level+1 == self.max_level:
                return (True, self.instance[self.current_level-1])
            else:
                self.current_level += 1
                return (False, self.instance[self.current_level])
        else:
            return (False, self.instance[self.current_level])

